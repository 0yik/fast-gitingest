name: Publish to PyPI

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (optional, will use current version if not specified)'
        required: false
        type: string
      test_pypi:
        description: 'Publish to Test PyPI instead of PyPI'
        required: false
        default: false
        type: boolean

jobs:
  build-and-publish:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        include:
          # Build for multiple architectures on macOS
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest 
            target: aarch64-apple-darwin
          # Build for multiple architectures on Linux
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          # Build for Windows
          - os: windows-latest
            target: x86_64-pc-windows-msvc

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install maturin
      run: pip install maturin

    - name: Update version if specified
      if: ${{ github.event.inputs.version != '' }}
      shell: bash
      run: |
        # Update version in pyproject.toml
        sed -i.bak 's/version = ".*"/version = "${{ github.event.inputs.version }}"/' pyproject.toml
        # Update version in Cargo.toml files
        sed -i.bak 's/version = ".*"/version = "${{ github.event.inputs.version }}"/' gitingest/Cargo.toml
        sed -i.bak 's/version = ".*"/version = "${{ github.event.inputs.version }}"/' gitingest-cli/Cargo.toml
        sed -i.bak 's/version = ".*"/version = "${{ github.event.inputs.version }}"/' gitingest-python/Cargo.toml

    - name: Build wheels (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        # Install cross compilation tools and OpenSSL dependencies
        if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu pkg-config libssl-dev
          export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
          # Use vendored OpenSSL for cross-compilation
          export OPENSSL_STATIC=1
          export OPENSSL_VENDORED=1
        else
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev
        fi
        maturin build --release --target ${{ matrix.target }}

    - name: Build wheels (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        maturin build --release --target ${{ matrix.target }}

    - name: Build wheels (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        maturin build --release --target ${{ matrix.target }}

    - name: Upload wheels as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.os }}-${{ matrix.target }}-py${{ matrix.python-version }}
        path: target/wheels/

  publish:
    needs: build-and-publish
    runs-on: ubuntu-latest
    if: always() && (needs.build-and-publish.result == 'success')
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist/
        pattern: wheels-*
        merge-multiple: true

    - name: Install publishing tools
      run: |
        pip install maturin twine

    - name: List built wheels
      run: |
        ls -la dist/
        echo "Total wheels built: $(ls dist/*.whl | wc -l)"

    - name: Publish to Test PyPI
      if: ${{ github.event.inputs.test_pypi == 'true' }}
      env:
        MATURIN_PYPI_TOKEN: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: |
        maturin publish --repository testpypi --username __token__ --password "$MATURIN_PYPI_TOKEN" --skip-existing

    - name: Publish to PyPI
      if: ${{ github.event.inputs.test_pypi != 'true' }}
      env:
        MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        maturin publish --username __token__ --password "$MATURIN_PYPI_TOKEN" --skip-existing

    - name: Create GitHub Release
      if: ${{ github.event.inputs.test_pypi != 'true' && github.event.inputs.version != '' }}
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ github.event.inputs.version }}
        name: Release v${{ github.event.inputs.version }}
        body: |
          ## Changes in v${{ github.event.inputs.version }}
          
          This release is available on PyPI:
          ```bash
          pip install fast-gitingest==${{ github.event.inputs.version }}
          ```
          
          Or upgrade:
          ```bash
          pip install --upgrade fast-gitingest
          ```
        files: dist/*.whl
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}