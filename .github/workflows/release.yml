name: Release

on:
  workflow_dispatch:

permissions:
  contents: write
    
env:
  CARGO_TERM_COLOR: always
  SCCACHE_GHA_ENABLED: "true"
  RUSTC_WRAPPER: "sccache"

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux targets
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: linux-x64
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: linux-arm64
          
          # macOS targets
          - target: x86_64-apple-darwin
            os: macos-latest
            name: macos-x64
          - target: aarch64-apple-darwin
            os: macos-latest
            name: macos-arm64
          
          # Windows targets
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: windows-x64
            ext: .exe

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.9

      - name: Install cross-compilation tools (Linux)
        if: matrix.os == 'ubuntu-latest' && matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          
      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Set environment variables for ARM64 (Linux)
        if: matrix.os == 'ubuntu-latest' && matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++" >> $GITHUB_ENV
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV

      - name: Build binary
        run: |
          cargo build --release --target ${{ matrix.target }} -p gitingest-cli

      - name: Package binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          mkdir -p dist
          cp target/${{ matrix.target }}/release/gitingest dist/gitingest-${{ matrix.name }}
          chmod +x dist/gitingest-${{ matrix.name }}

      - name: Package binary (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          mkdir dist
          copy target\${{ matrix.target }}\release\gitingest.exe dist\gitingest-${{ matrix.name }}.exe

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: gitingest-${{ matrix.name }}
          path: dist/gitingest-${{ matrix.name }}${{ matrix.ext || '' }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get version from Cargo.toml
        id: get_version
        run: |
          VERSION=$(grep '^version = ' gitingest-cli/Cargo.toml | sed 's/version = "\(.*\)"/\1/')
          echo "version=v$VERSION" >> $GITHUB_OUTPUT
          echo "Version: v$VERSION"

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          # Copy all binary files from artifacts
          find artifacts -type f \( -name "gitingest-*" \) | while read file; do
            cp "$file" release-assets/
          done
          # Make Unix binaries executable
          chmod +x release-assets/gitingest-* 2>/dev/null || true
          ls -la release-assets/

      - name: Create checksums
        run: |
          cd release-assets
          sha256sum * > checksums.txt

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          name: Release ${{ steps.get_version.outputs.version }}
          files: release-assets/*
          body: |
            ## Changes
            
            Release ${{ steps.get_version.outputs.version }} of gitingest CLI tool.
            
            ## Installation
            
            Download the appropriate binary for your platform:
            - Linux x64: `gitingest-linux-x64`
            - Linux ARM64: `gitingest-linux-arm64`
            - macOS x64: `gitingest-macos-x64`
            - macOS ARM64: `gitingest-macos-arm64`
            - Windows x64: `gitingest-windows-x64.exe`
            
            Make the binary executable and run:
            ```bash
            chmod +x gitingest-*
            ./gitingest-* --help
            ```
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}